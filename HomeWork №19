using System;

namespace HomeWork
{
    class Program
    {
        static void Main(string[] args)
        {
            const string CommandAttack = "1";
            const string CommandSpell = "2";
            const string CommandStance = "3";

            const string CommandSpellFrost = "1";
            const string CommandSpellSummon = "2";
            const string CommandSpellLifeSteal = "3";
            const string CommandSpellSacriface = "4";

            const string CommandAttackStance = "1";
            const string CommandDefendStance = "2";
            const string CommandNeutralStance = "3";

            int playerHealth = 100;
            int playerHealthEnd = 0;
            int playerDamage = 20;
            int spellCastLimit = 5;
            int spellCastEmpty = 0;
            int playerAccuracy = 8;
            int playerEvasion = 16;
            int playerCritMult = 2;
            int attackStanceBonus = 5;
            int defendStanceBonus = 5;
            bool isAttackStance = false;
            bool isDefendStance = false;

            int frostSpellDamage = 25;
            int frostSpellEffect = 5;
            int frostSpellDuration = 5;
            int frostEffectTimer = 0;
            int frostTimerEnd = 0;
            bool isFrozen = false;

            int summonDamage = 5;
            int summonHeaithCost = 25;
            bool isSummoned = false;

            int vampirDamage = 50;
            int maxPlayerHealth = playerHealth;

            int sacrifaceDamage = 150;

            int enemyHealth = 500;
            int enemyHealthEnd = 0;
            int enemyDamage = 15;
            int enemyAccuracy = 5;
            int enemyEvasion = 12;
            int enemyCritMult = 3;

            int attackRoll;
            int totalAttackRoll;
            int rollMin = 1;
            int rollMax = 21;
            int critRoll = 20;

            int battleTurn = 0;
            bool isBattleEnd = false;

            Random random = new Random();

            string userInput;

            while (isBattleEnd == false)
            {
                Console.Clear();

                if (isFrozen == true)
                {
                    frostEffectTimer--;

                    if (frostEffectTimer == frostTimerEnd)
                    {
                        enemyAccuracy += frostSpellEffect;
                        enemyEvasion += frostSpellEffect;
                        enemyDamage += frostSpellEffect;
                    }
                }

                Console.WriteLine(
                    $"{"Ваши параметры:",20}  {"Ваш враг:",26}\n" +
                    $"{"Здоровье:",20 }  {playerHealth,5} {"Здоровье: ",20 }  {enemyHealth,5}\n" +
                    $"{"Точность:",20 }  {playerAccuracy,5} {"Точность:",20 }  {enemyAccuracy,5}\n" +
                    $"{"Уклонение:",20 }  {playerEvasion,5} {"Уклонение:",20 }  {enemyEvasion,5}\n" +
                    $"{"Базовый урон:",20 }  {playerDamage,5} {"Базовый урон:",20 }  {enemyDamage,5}\n" +
                    $"{"Множитель крита:",20 }  {playerCritMult,5} {"Множитель крита:",20 }  {enemyCritMult,5}\n" +
                    $"{"Запас заклинаний:",20 }  {spellCastLimit,5}\n\n" +
                    $"{"Ход боя:",20} {battleTurn}");

                if (isAttackStance)
                    Console.WriteLine($"{"Ваша стойка:",20} Атакующая\n");
                else if (isDefendStance)
                    Console.WriteLine($"{"Ваша стойка:",20} Защитная\n");
                else
                    Console.WriteLine($"{"Ваша стойка:",20} Нейтральная\n");

                Console.Write(
                    $"{CommandAttack}.Атаковать\n" +
                    $"{CommandSpell}.Заклинание\n" +
                    $"{CommandStance}.Сменить стойку\n" +
                    $"Ваши действия: ");

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAttack:
                        attackRoll = random.Next(rollMin, rollMax);
                        totalAttackRoll = attackRoll + playerAccuracy;
                        Console.WriteLine($"\nАтака: {attackRoll} + {playerAccuracy} = {attackRoll + playerAccuracy}");

                        if (attackRoll == critRoll)
                        {
                            enemyHealth -= playerDamage * playerCritMult;
                            Console.WriteLine($"Критическое попадание, нанесённый урон: {playerDamage * playerCritMult}");
                        }
                        else if (totalAttackRoll > enemyEvasion)
                        {
                            enemyHealth -= playerDamage;
                            Console.WriteLine($"Попадание, нанесённый урон: {playerDamage}");
                        }
                        else
                        {
                            Console.WriteLine($"Промах, урона не насено.");
                        }

                        battleTurn++;
                        break;
                    case CommandSpell:
                        if (spellCastLimit > spellCastEmpty)
                        {
                            Console.Write(
                                $"\n{CommandSpellFrost}. Обморожение (наносит {frostSpellDamage} урона, -{frostSpellEffect} к урону, точности и уклонению на {frostSpellDuration} ходов)\n" +
                                $"{CommandSpellSummon}. Призыв Гекатонхейр (жертвуете {summonHeaithCost} на призыв, наносит {summonDamage} раз в ход)\n" +
                                $"{CommandSpellLifeSteal}. Вытягивание жизни (наносит {vampirDamage} урона и столько же восстанавливает жизни)\n" +
                                $"{CommandSpellSacriface}. Тёмный ритуал (жертвует суммоном для нанесения {sacrifaceDamage} урона) \n" +
                                $"Ваш выбор: ");

                            userInput = Console.ReadLine();

                            switch (userInput)
                            {
                                case CommandSpellFrost:
                                    enemyHealth -= frostSpellDamage;
                                    enemyEvasion -= frostSpellEffect;
                                    enemyAccuracy -= frostSpellEffect;
                                    enemyDamage -= frostSpellEffect;
                                    isFrozen = true;
                                    frostEffectTimer = frostSpellDuration;
                                    break;
                                case CommandSpellSummon:
                                    if (isSummoned == false)
                                    {
                                        isSummoned = true;
                                    }
                                    else
                                    {
                                        Console.WriteLine("нельзя призвать еще одного суммона, пока жив предыдущий.");
                                        Console.ReadKey();
                                        continue;
                                    }

                                    break;
                                case CommandSpellLifeSteal:
                                    enemyHealth -= vampirDamage;
                                    playerHealth += vampirDamage;

                                    if (playerHealth > maxPlayerHealth)
                                        playerHealth = maxPlayerHealth;

                                    break;
                                case CommandSpellSacriface:
                                    if (isSummoned == true)
                                    {
                                        enemyHealth -= sacrifaceDamage;
                                        isSummoned = false;
                                        Console.WriteLine($"Суммон был пожертвован. Нанесено {sacrifaceDamage}");
                                    }
                                    else
                                    {
                                        Console.WriteLine("Нельзя использовать без призванного суммона.");
                                        Console.ReadKey();
                                        continue;
                                    }

                                    break;
                                default:
                                    continue;
                            }
                            spellCastLimit--;
                            battleTurn++;
                        }
                        else
                        {
                            Console.WriteLine("У вас закончился запас заклинаний.");
                            Console.ReadKey();
                            continue;
                        }

                        break;
                    case CommandStance:
                        Console.Write(
                            $"\n{CommandAttackStance}.Атакующая +{attackStanceBonus} к урону -{attackStanceBonus} к уклонению\n" +
                            $"{CommandDefendStance}.Защитная +{defendStanceBonus} к уклонению -{attackStanceBonus} к точности\n" +
                            $"{CommandNeutralStance}.Нейтральная -/+0\n" +
                            $"Ваш выбор: ");

                        userInput = Console.ReadLine();

                        switch (userInput)
                        {
                            case CommandAttackStance:
                                if (isAttackStance == false)
                                {
                                    isAttackStance = true;
                                    playerDamage += attackStanceBonus;
                                    playerEvasion -= attackStanceBonus;
                                }

                                if (isDefendStance == true)
                                {
                                    isDefendStance = false;
                                    playerEvasion -= defendStanceBonus;
                                    playerAccuracy += defendStanceBonus;
                                }

                                break;
                            case CommandDefendStance:
                                if (isAttackStance == true)
                                {
                                    isAttackStance = false;
                                    playerDamage -= attackStanceBonus;
                                    playerEvasion += attackStanceBonus;
                                }

                                if (isDefendStance == false)
                                {
                                    isDefendStance = true;
                                    playerEvasion += defendStanceBonus;
                                    playerAccuracy -= defendStanceBonus;
                                }

                                break;
                            case CommandNeutralStance:
                                if (isAttackStance == true)
                                {
                                    isAttackStance = false;
                                    playerDamage -= attackStanceBonus;
                                    playerEvasion += attackStanceBonus;
                                }

                                if (isDefendStance == true)
                                {
                                    isDefendStance = false;
                                    playerEvasion -= defendStanceBonus;
                                    playerAccuracy += defendStanceBonus;
                                }

                                break;
                            default:
                                continue;
                        }
                        continue;
                    default:
                        continue;
                }

                if (isSummoned == true)
                {
                    enemyHealth -= summonDamage;
                    Console.WriteLine($"Суммон нанёс {summonDamage} урона");
                }

                attackRoll = random.Next(rollMin, rollMax);
                totalAttackRoll = attackRoll + playerAccuracy;
                Console.WriteLine("\nХод врага:");
                Console.WriteLine($"\nАтака: {attackRoll} + {enemyAccuracy} = {attackRoll + enemyAccuracy}");

                if (attackRoll == critRoll)
                {
                    playerHealth -= enemyDamage * enemyCritMult;
                    Console.WriteLine($"Критическое попадание, нанесённый урон: {enemyDamage * enemyCritMult}");
                }
                else if (totalAttackRoll > playerEvasion)
                {
                    playerHealth -= enemyDamage;
                    Console.WriteLine($"Попадание, нанесённый урон: {enemyDamage}");
                }
                else
                {
                    Console.WriteLine($"Промах, урона не насено.");
                }

                if (playerHealth <= playerHealthEnd && enemyHealth <= enemyHealthEnd)
                {
                    isBattleEnd = true;
                    Console.WriteLine("Ничья. Оба погибли.");
                }
                else if (playerHealth <= playerHealthEnd)
                {
                    isBattleEnd = true;
                    Console.WriteLine("Вы проиграли.");
                }
                else if (enemyHealth <= enemyHealthEnd)
                {
                    isBattleEnd = true;
                    Console.WriteLine("Босс повержен.");
                }

                Console.ReadKey();
            }
        }
    }
}
