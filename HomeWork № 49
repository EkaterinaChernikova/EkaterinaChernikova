using System;
using System.Collections.Generic;

namespace HomeWork
{
    static class Randomizer
    {
        private static Random random = new Random();

        public static int GetRandomNumber(int minimal, int maximal)
        {
            return random.Next(minimal, maximal);
        }

        public static double GetRandomDoubleNumber()
        {
            return random.NextDouble();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            const string Command_Exit = "Exit";

            Zoo zoo = new Zoo();
            bool isExit = false;
            string userInput;

            while (isExit == false)
            {
                Console.Clear();
                Console.Write($"Вы находитесь в зоопарке, в зоопарке {zoo.EnclosuresCount} вольеров,\n" +
                              $"к какому вольеру вы хотите подойти? \nВведите число (или {Command_Exit} для выхода): ");

                userInput = Console.ReadLine();

                if (userInput.ToLower() == Command_Exit.ToLower())
                {
                    isExit = true;
                }
                else
                {
                    zoo.Walk(userInput);
                }

                Console.ReadKey();
            }
        }
    }

    class Zoo
    {
        private List<Enclosure> _enclosures = new List<Enclosure>();

        public Zoo()
        {
            List<Animal> exampleAnimals = new List<Animal>()
            {
                new Owl(),
                new WildCat(),
                new Hourse(),
                new Peacock(),
                new DeerMoonjack(),
                new Moose(),
                new Lynx(),
                new Rabbit(),
                new Wolf(),
                new Turtle(),
            };

            foreach (Animal animal in exampleAnimals)
            {
                _enclosures.Add(new Enclosure(animal));
            }

            EnclosuresCount = _enclosures.Count;
        }

        public int EnclosuresCount { get; private set; }

        public void Walk(string userInput)
        {
            int.TryParse(userInput, out int enclosureNumber);
            enclosureNumber--;

            if (enclosureNumber >= 0 && enclosureNumber < _enclosures.Count)
            {
                _enclosures[enclosureNumber].ShowInfo();
            }
        }
    }

    class Enclosure
    {
        private List<Animal> _animals = new List<Animal>();

        public Enclosure(Animal animal)
        {
            int minimalAnimalsCount = 5;
            int maximalAnimalsCount = 15;

            Capacity = Randomizer.GetRandomNumber(minimalAnimalsCount, maximalAnimalsCount);

            for (int i = 0; i < Capacity; i++)
            {
                _animals.Add(animal.Clone());
            }
        }

        public int Capacity { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"\nВ данном вальере находятся {Capacity} животных, вида {_animals[0].Type}, они издают звук {_animals[0].Sound}.\n");

            foreach (Animal animal in _animals)
            {
                animal.ShowInfo();
            }
        }
    }

    abstract class Animal
    {
        public Animal()
        {
            Gender = Randomizer.GetRandomDoubleNumber() >= 0.5 ? "М" : "Ж";
        }

        public string Type { get; protected set; }
        public string Gender { get; protected set; }
        public string Sound { get; protected set; }

        public abstract Animal Clone();

        public void ShowInfo()
        {
            Console.WriteLine($"Название: {Type}, пол: {Gender}");
        }
    }

    class Owl : Animal
    {
        private string _type = "Сова";
        private string _sound = "Уху";

        public Owl() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Owl();
        }
    }

    class WildCat : Animal
    {
        private string _type = "Дикий кот";
        private string _sound = "Мяу";

        public WildCat() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new WildCat();
        }
    }

    class Peacock : Animal
    {
        private string _type = "Павлин";
        private string _sound = "аааАААааа!";

        public Peacock() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Peacock();
        }
    }

    class Hourse : Animal
    {
        private string _type = "Лошадь";
        private string _sound = "Фыр";

        public Hourse() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Hourse();
        }
    }

    class DeerMoonjack : Animal
    {
        private string _type = "Олень-мунжак";
        private string _sound = "ААААаафф";

        public DeerMoonjack() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new DeerMoonjack();
        }
    }

    class Moose : Animal
    {
        private string _type = "Лось";
        private string _sound = "Нуууу";

        public Moose() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Moose();
        }
    }

    class Lynx : Animal
    {
        private string _type = "Рысь";
        private string _sound = "Аам";

        public Lynx() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Lynx();
        }
    }

    class Rabbit : Animal
    {
        private string _type = "Кролик";
        private string _sound = "хурррр";

        public Rabbit() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Rabbit();
        }
    }

    class Wolf : Animal
    {
        private string _type = "Волк";
        private string _sound = "грррр";

        public Wolf() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Wolf();
        }
    }

    class Turtle : Animal
    {
        private string _type = "Черепаха";
        private string _sound = "***";

        public Turtle() : base()
        {
            Type = _type;
            Sound = _sound;
        }

        public override Animal Clone()
        {
            return new Turtle();
        }
    }
}
