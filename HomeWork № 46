using System;
using System.Collections.Generic;

namespace HomeWork
{
    class Program
    {
        static void Main(string[] args)
        {
            string userInput;
            int buyersCount;

            do
            {
                Console.Clear();
                Console.Write("Сколько клиентов обслужить сегодня? Введите число: ");
                userInput = Console.ReadLine();
            }
            while (int.TryParse(userInput, out buyersCount) == false);

            Market market = new Market(buyersCount);

            while (market.GetQueueCount() > 0)
            {
                Console.Clear();
                market.ServeBuyer();
                Console.ReadKey();
            }

            Console.WriteLine("Покупатели на сегодня закончились.");
            Console.ReadKey();
        }
    }

    class Market
    {
        private Queue<Buyer> _queue = new Queue<Buyer>();
        private List<Product> _products = new List<Product>();
        private Buyer _buyer;
        private Random _random = new Random();

        public Market(int buyersCount)
        {
            int marketProductsCount = 50;
            int minimalProductPrice = 200;
            int maximalProductPrice = 2500;
            int minimalBuyerFinance = 1000;
            int maximalBuyerFinance = 10000;

            for(int i = 0; i < marketProductsCount; i++)
            {
                _products.Add(new Product(i, _random.Next(minimalProductPrice, maximalProductPrice)));
            }

            for(int i = 0; i < buyersCount; i++)
            {
                _queue.Enqueue(new Buyer(i, _products, _random.Next(minimalBuyerFinance, maximalBuyerFinance)));
            }
        }

        public void ServeBuyer()
        {
            _buyer = _queue.Peek();
            int buyerTotalPrice = CalculateTotalPrice(_buyer.GetList());

            Console.WriteLine($"Людей в очереди: {_queue.Count}");
            _buyer.PrintInfo();
            Console.WriteLine($"Итоговая сумма покупок: {buyerTotalPrice}");

            if (buyerTotalPrice > _buyer.Money)
            {
                Console.WriteLine("У покупателя не достаточно денег.");
                _buyer.RemoveRandomProduct();
            }
            else if (buyerTotalPrice != 0)
            {
                Console.WriteLine("У покупателя достаточно денег.");
                _buyer.Pay(buyerTotalPrice);
                _queue.Dequeue();
            }
            else if (buyerTotalPrice == 0)
            {
                Console.WriteLine("Покупатель уходит ни с чем.");
                _queue.Dequeue();
            }
        }

        public int GetQueueCount()
        {
            return _queue.Count;
        }

        public int CalculateTotalPrice(List<Product> products)
        {
            int TotalPrice = 0;

            foreach (Product product in products)
            {
                TotalPrice += product.Price;
            }

            return TotalPrice;
        }
    }

    class Buyer
    {
        private string _number = "Покупатель № ";
        private Random _random = new Random();
        private List<Product> _product = new List<Product>();

        public Buyer(int number, List<Product> products, int money)
        {
            int minimalProducts = 1;
            int maximalProducts = 10;

            _number += number;
            Money = money;
            int productsCount = _random.Next(minimalProducts, maximalProducts);

            for (int i = 0; i < productsCount; i++)
            {
                _product.Add(products[_random.Next(0, productsCount)]);
            }
        }

        public int Money { get; private set; }

        public List<Product> GetList()
        {
            return _product;
        }

        public void PrintInfo()
        {
            Console.WriteLine(_number + " Имеющиеся финансы: " + Money);

            foreach (Product product in _product)
            {
                product.PrintInfo();
            }
        }

        public void RemoveRandomProduct()
        {
            int index = _random.Next(0, _product.Count);
            Console.WriteLine($"Покупатель отказался от {_product[index].Title}");
            _product.RemoveAt(index);
        }

        public void Pay(int price)
        {
            Money -= price;
            Console.WriteLine($"Оплачено: {price}, остаток финансов: {Money}");
        }
    }

    class Product
    {
        public Product(int number, int price)
        {
            Price = price;
            Title = "Продукт № " + number;
        }

        public string Title { get; private set; }
        public int Price { get; private set; }

        public void PrintInfo()
        {
            Console.WriteLine(Title + " Цена " + Price);
        }
    }
}
