using System;
using System.Collections.Generic;

namespace HomeWork
{
    class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.BeginWork();
        }
    }

    class CarService
    {
        private int _money = 10000;
        private Random _random = new Random();
        private Werehouse _werehouse;
        private Client _client = null;

        public CarService()
        {
            _werehouse = new Werehouse(_random);
        }

        public void BeginWork()
        {
            const string CommandRepair = "1";
            const string CommandRefuse = "2";
            const string CommandExit = "3";
            string userInput;
            bool isExit = false;

            while (isExit == false)
            {
                Console.Clear();
                Console.WriteLine("Сервис начал работу:\n" +
                                 $"Средства сервиса {_money}\n" +
                                 $"Детали имеющиеся на складе:\n");

                _werehouse.ShowPartList();
                CreateRandomClient();

                Console.Write("\n К вам в сервис пожаловал клиент, \n" +
                    $"в его машине сломана деталь №{_client.GetCarPartNumber()}:\n" +
                    $"{CommandRepair}. Заменить сломанную деталь. \n" +
                    $"{CommandRefuse}. Отказать в обслуживании.\n" +
                    $"{CommandExit}. Уволиться.\n" +
                    $"Ваш выбор: ");

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandRepair:
                        Repair();
                        break;

                    case CommandRefuse:
                        Refuse();
                        break;

                    case CommandExit:
                        isExit = true;
                        break;
                }

                if (_money < 0)
                {
                    isExit = true;
                    Console.WriteLine($" Вы приносите слишком много убытков, вы уволены.");
                }

                Console.ReadKey();
            }
        }

        public void CreateRandomClient()
        {
            if (_client == null)
            {
                _client = new Client(_random);
            }
        }

        private void Repair()
        {
            string userInput;
            int partNumber = 0;
            int priceForWork = 0;
            int priceRatio1 = 4;
            int priceRatio2 = 3;
            int minimalPartNumber = 1;
            int maximalPartNumber = 25;

            Console.Write("\n На какую деталь заменить сломанную?\n" +
                " Ваш ввод: ");

            userInput = Console.ReadLine();
            int.TryParse(userInput, out partNumber);

            if (_werehouse.IsContainsPart(partNumber) == true
                && partNumber >= minimalPartNumber
                && partNumber < maximalPartNumber)
            {
                priceForWork = _werehouse.GetPrice(partNumber) * priceRatio1 / priceRatio2;
                _werehouse.RemovePart(partNumber);

                if (_client.GetCarPartNumber() == partNumber)
                {
                    ReplaceCorrectParts(partNumber, priceForWork);
                }
                else
                {
                    ReplaceIncorrectParts(partNumber, priceForWork);
                }
            }
            else if (partNumber >= minimalPartNumber && partNumber < maximalPartNumber)
            {
                AskAboutNewPart(partNumber);
            }
        }

        private void ReplaceCorrectParts(int partNumber, int priceForWork)
        {
            if (_client.Money >= priceForWork)
            {
                _client.Pay(priceForWork);
                _money += priceForWork;
                Console.WriteLine(" Клиент расплатился за работу, можно приступать к ремонту.");
                Console.WriteLine($"\n Вы заметили сломанную деталь №{_client.GetCarPartNumber()} на деталь №{partNumber}.");
                _client.RemoveCarBreackDown();
                Console.WriteLine(" Ремонт прошел успешно, клиент доволен.");
                _client = null;
            }
            else
            {
                Console.WriteLine(" Клиент не может расплатился за работу, уходит ругаясь матом.");
                _werehouse.AddCarPart(partNumber);
                _client = null;
            }
        }

        private void ReplaceIncorrectParts(int partNumber, int priceForWork)
        {
            Console.WriteLine(" Вы перепутали детали, клиент не доволен. Вас ждёт штраф! Клиент ушёл в другой сервис.");
            ApplyPenalty(priceForWork);
            _client = null;
        }

        private void AskAboutNewPart(int partNumber)
        {
            string userInputYes = "1";
            string userInputNo = "2";

            Console.Write("\n Данной детали на складе не обнаружено.\n" +
                   "Приобрести недостающую деталь?\n" +
                   $"{userInputYes}. Да.\n" +
                   $"{userInputNo}. Нет.\n" +
                   $"Ваш выбор: ");

            string userInput = Console.ReadLine();

            if (userInput == userInputYes)
            {
                BuyCarPart(partNumber);
            }
        }

        private void BuyCarPart(int partNumber)
        {
            CarPart newPart = new CarPart(partNumber);

            if (newPart.Price <= _money)
            {
                _money -= newPart.Price;
                _werehouse.AddCarPart(partNumber);
                Console.WriteLine(" Деталь успешно приобретена.");
            }
            else
            {
                Console.WriteLine(" Увы, вы не можете позволить себе таких расходов.");
            }
        }

        private void Refuse()
        {
            int standartPenalty = 500;
            ApplyPenalty(standartPenalty);
            _client = null;
            Console.WriteLine($" Вы отказались обслуживать, вас оштрафовалина {standartPenalty}, клиент ушел недовольный.");
        }

        private void ApplyPenalty(int penalty)
        {
            _money -= penalty;
        }
    }

    class Werehouse
    {
        private int _capacity = 100;
        private List<StorageCell> _storage = new List<StorageCell>();

        public Werehouse(Random random)
        {
            for (int i = 0; i < _capacity; i++)
            {
                CarPart newCarPart = new CarPart(random);

                AddCarPart(newCarPart.Number);
            }
        }

        public void RemovePart(int partNumber)
        {
            for (int i = 0; i < _storage.Count; i++)
            {
                if (_storage[i].PartNumber == partNumber)
                {
                    _storage[i].RemovePart();

                    if (_storage[i].PartsCount == 0)
                    {
                        _storage.RemoveAt(i);
                    }

                    i = _storage.Count;
                }
            }
        }

        public int GetPrice(int partNumber)
        {
            int price = 0;

            for (int i = 0; i < _storage.Count; i++)
            {
                if (_storage[i].PartNumber == partNumber)
                {
                    price = _storage[i].PartPrice;
                    i = _storage.Count;
                }
            }

            return price;
        }

        public void AddCarPart(int partNumber)
        {
            if (IsContainsPart(partNumber) == true)
            {
                _storage[GetCellIndex(partNumber)].AddPart(partNumber);
            }
            else
            {
                _storage.Add(new StorageCell(partNumber));
                SortStorage();
            }
        }

        public void ShowPartList()
        {
            foreach (StorageCell cell in _storage)
            {
                cell.ShowInfo();
            }
        }

        public bool IsContainsPart(int number)
        {
            bool isFind = false;

            foreach (StorageCell cell in _storage)
            {
                if (cell.PartNumber == number)
                {
                    isFind = true;
                }
            }

            return isFind;
        }

        private int GetCellIndex(int partNumber)
        {
            for (int i = 0; i < _storage.Count; i++)
            {
                if (_storage[i].PartNumber == partNumber)
                {
                    return i;
                }
            }

            return 0;
        }

        private void SortStorage()
        {
            StorageCell buffer;

            for (int i = 0; i < _storage.Count; i++)
            {
                for (int j = i; j < _storage.Count; j++)
                {
                    if (_storage[i].PartNumber > _storage[j].PartNumber)
                    {
                        buffer = _storage[i];
                        _storage[i] = _storage[j];
                        _storage[j] = buffer;
                    }
                }
            }
        }
    }

    class StorageCell
    {
        private List<CarPart> _cell = new List<CarPart>();

        public StorageCell(int partNumber)
        {
            CarPart newCarPart = new CarPart(partNumber);

            PartNumber = newCarPart.Number;
            PartPrice = newCarPart.Price;
            AddPart(partNumber);
        }

        public int PartNumber { get; private set; }
        public int PartPrice { get; private set; }
        public int PartsCount { get; private set; }

        public void AddPart(int partNumber)
        {
            _cell.Add(new CarPart(partNumber));
            PartsCount = _cell.Count;
        }

        public void RemovePart()
        {
            _cell.RemoveAt(0);
            PartsCount = _cell.Count;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Номер детали: {PartNumber} цена: {PartPrice} кол-во: {PartsCount}");
        }
    }

    class Car
    {
        private CarPart _breackdown;

        public Car(Random random)
        {
            _breackdown = new CarPart(random);
        }

        public void RemoveBreackDown()
        {
            _breackdown = null;
        }

        public int GetPartNumber()
        {
            return _breackdown.Number;
        }
    }

    class Client
    {
        private Car _car;

        public Client(Random random)
        {
            int minimalMoney = 5000;
            int maximalMoney = 15000;

            _car = new Car(random);
            Money = random.Next(minimalMoney, maximalMoney);
        }

        public int Money { get; private set; }

        public void Pay(int price)
        {
            Money -= price;
        }

        public void RemoveCarBreackDown()
        {
            _car.RemoveBreackDown();
        }

        public int GetCarPartNumber()
        {
            return _car.GetPartNumber();
        }
    }

    class CarPart
    {
        public CarPart(Random random)
        {
            int minimalPartNumber = 1;
            int maximalPartNumber = 25;

            Number = random.Next(minimalPartNumber, maximalPartNumber);
            Price = Number * PartPriceRate;
        }

        public CarPart(int partNumber)
        {
            Number = partNumber;
            Price = Number * PartPriceRate;
        }

        public int PartPriceRate { get; private set; } = 500;
        public int Price { get; private set; }
        public int Number { get; private set; }
    }
}
