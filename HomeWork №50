using System;
using System.Collections.Generic;

namespace HomeWork
{
    class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.Work();
        }
    }

    class CarService
    {
        private int _money = 10000;
        private Random _random = new Random();
        private Warehouse _warehouse;

        public CarService()
        {
            _warehouse = new Warehouse(_random);
        }

        public void Work()
        {
            const string CommandRepair = "1";
            const string CommandRefuse = "2";
            const string CommandExit = "3";
            string userInput;
            bool isExit = false;
            Client client = null;

            while (isExit == false)
            {
                Console.Clear();
                Console.WriteLine("Сервис начал работу:\n" +
                                 $"Средства сервиса {_money}\n" +
                                 $"Детали имеющиеся на складе:\n");

                _warehouse.ShowPartList();

                if (client == null || client.IsLeave == true)
                {
                    client = new Client(_random, _warehouse.MinimalPartIndex, _warehouse.MaximalPartIndex);
                }

                Console.Write("\n К вам в сервис пожаловал клиент, \n" +
                    $"в его машине сломана деталь №{client.GetPartNumber()}:\n" +
                    $"{CommandRepair}. Заменить сломанную деталь. \n" +
                    $"{CommandRefuse}. Отказать в обслуживании.\n" +
                    $"{CommandExit}. Уволиться.\n" +
                    $"Ваш выбор: ");

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandRepair:
                        Repair(client);
                        break;

                    case CommandRefuse:
                        Refuse(client);
                        break;

                    case CommandExit:
                        isExit = true;
                        break;
                }

                if (_money < 0)
                {
                    isExit = true;
                    Console.WriteLine($" Вы приносите слишком много убытков, вы уволены.");
                }

                Console.ReadKey();
            }
        }

        private void Repair(Client client)
        {
            string userInput;
            int partNumber = 0;
            int priceForWork = 0;
            int priceRatio1 = 4;
            int priceRatio2 = 3;
            int minimalPartNumber = 1;
            int maximalPartNumber = 25;

            Console.Write("\n На какую деталь заменить сломанную?\n" +
                " Ваш ввод: ");

            userInput = Console.ReadLine();
            int.TryParse(userInput, out partNumber);

            if (_warehouse.IsContainsPart(partNumber) == true
                && partNumber >= minimalPartNumber
                && partNumber < maximalPartNumber)
            {
                priceForWork = _warehouse.GetPrice(partNumber) * priceRatio1 / priceRatio2;
                _warehouse.RemovePart(partNumber);

                if (client.GetPartNumber() == partNumber)
                {
                    ReplaceCorrectParts(partNumber, priceForWork, client);
                }
                else
                {
                    ReplaceIncorrectParts(partNumber, priceForWork, client);
                }
            }
            else if (partNumber >= minimalPartNumber && partNumber < maximalPartNumber)
            {
                BuyNewPart(partNumber);
            }
        }

        private void ReplaceCorrectParts(int partNumber, int priceForWork, Client client)
        {
            if (client.Money >= priceForWork)
            {
                client.Pay(priceForWork);
                _money += priceForWork;
                Console.WriteLine(" Клиент расплатился за работу, можно приступать к ремонту.");
                Console.WriteLine($"\n Вы заметили сломанную деталь №{client.GetPartNumber()} на деталь №{partNumber}.");
                client.RemoveBreackDown();
                Console.WriteLine(" Ремонт прошел успешно, клиент доволен.");
                client.Leave();
            }
            else
            {
                Console.WriteLine(" Клиент не может расплатился за работу, уходит ругаясь матом.");
                _warehouse.AddPart(partNumber);
                client.Leave();
            }
        }

        private void ReplaceIncorrectParts(int partNumber, int priceForWork, Client client)
        {
            Console.WriteLine(" Вы перепутали детали, клиент не доволен. Вас ждёт штраф! Клиент ушёл в другой сервис.");
            ApplyPenalty(priceForWork);
            client.Leave();
        }

        private void BuyNewPart(int partNumber)
        {
            string userInputYes = "1";

            Console.Write("\n Данной детали на складе не обнаружено.\n" +
                   "Приобрести недостающую деталь?\n" +
                   $"{userInputYes}. Да.\n" +
                   $"2. Нет (любой другой ввод).\n" +
                   $"Ваш выбор: ");

            string userInput = Console.ReadLine();

            if (userInput == userInputYes)
            {
                BuyCarPart(partNumber);
            }
        }

        private void BuyCarPart(int partNumber)
        {
            CarPart newPart = new CarPart(partNumber);

            if (newPart.Price <= _money)
            {
                _money -= newPart.Price;
                _warehouse.AddPart(partNumber);
                Console.WriteLine(" Деталь успешно приобретена.");
            }
            else
            {
                Console.WriteLine(" Увы, вы не можете позволить себе таких расходов.");
            }
        }

        private void Refuse(Client client)
        {
            int standartPenalty = 500;
            ApplyPenalty(standartPenalty);
            client.Leave();
            Console.WriteLine($" Вы отказались обслуживать, вас оштрафовалина {standartPenalty}, клиент ушел недовольный.");
        }

        private void ApplyPenalty(int penalty)
        {
            _money -= penalty;
        }
    }

    class Warehouse
    {
        private int _capacity = 100;
        private List<StorageCell> _cells = new List<StorageCell>();

        public Warehouse(Random random)
        {
            for (int i = 0; i < _capacity; i++)
            {
                CarPart newCarPart = new CarPart(random.Next(MinimalPartIndex, MaximalPartIndex));

                AddPart(newCarPart.Number);
            }
        }

        public int MinimalPartIndex { get; private set; } = 1;
        public int MaximalPartIndex { get; private set; } = 25;

        public void RemovePart(int partNumber)
        {
            for (int i = 0; i < _cells.Count; i++)
            {
                if (_cells[i].PartNumber == partNumber)
                {
                    _cells[i].RemovePart();

                    if (_cells[i].PartsCount == 0)
                    {
                        _cells.RemoveAt(i);
                    }

                    i = _cells.Count;
                }
            }
        }

        public int GetPrice(int partNumber)
        {
            int price = 0;

            for (int i = 0; i < _cells.Count; i++)
            {
                if (_cells[i].PartNumber == partNumber)
                {
                    price = _cells[i].PartPrice;
                    i = _cells.Count;
                }
            }

            return price;
        }

        public void AddPart(int partNumber)
        {
            if (IsContainsPart(partNumber) == true)
            {
                _cells[GetCellIndex(partNumber)].AddPart(partNumber);
            }
            else
            {
                _cells.Add(new StorageCell(partNumber));
                SortsCells();
            }
        }

        public void ShowPartList()
        {
            foreach (StorageCell cell in _cells)
            {
                cell.ShowInfo();
            }
        }

        public bool IsContainsPart(int number)
        {
            bool isFind = false;

            foreach (StorageCell cell in _cells)
            {
                if (cell.PartNumber == number)
                {
                    isFind = true;
                }
            }

            return isFind;
        }

        private int GetCellIndex(int partNumber)
        {
            for (int i = 0; i < _cells.Count; i++)
            {
                if (_cells[i].PartNumber == partNumber)
                {
                    return i;
                }
            }

            return 0;
        }

        private void SortsCells()
        {
            StorageCell buffer;

            for (int i = 0; i < _cells.Count; i++)
            {
                for (int j = i; j < _cells.Count; j++)
                {
                    if (_cells[i].PartNumber > _cells[j].PartNumber)
                    {
                        buffer = _cells[i];
                        _cells[i] = _cells[j];
                        _cells[j] = buffer;
                    }
                }
            }
        }
    }

    class StorageCell
    {
        private List<CarPart> _parts = new List<CarPart>();

        public StorageCell(int partNumber)
        {
            CarPart newCarPart = new CarPart(partNumber);

            PartNumber = newCarPart.Number;
            PartPrice = newCarPart.Price;
            AddPart(partNumber);
        }

        public int PartNumber { get; private set; }
        public int PartPrice { get; private set; }
        public int PartsCount { get; private set; }

        public void AddPart(int partNumber)
        {
            _parts.Add(new CarPart(partNumber));
            PartsCount = _parts.Count;
        }

        public void RemovePart()
        {
            _parts.RemoveAt(0);
            PartsCount = _parts.Count;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Номер детали: {PartNumber} цена: {PartPrice} кол-во: {PartsCount}");
        }
    }

    class Car
    {
        private CarPart _breackdown;

        public Car(int partIndex)
        {
            _breackdown = new CarPart(partIndex);
        }

        public void RemoveBreackDown()
        {
            _breackdown = null;
        }

        public int GetPartNumber()
        {
            return _breackdown.Number;
        }
    }

    class Client
    {
        private Car _car;

        public Client(Random random, int minimalPartIndex, int maximalPartIndex)
        {
            int minimalMoney = 5000;
            int maximalMoney = 15000;

            _car = new Car(random.Next(minimalPartIndex, maximalPartIndex));
            Money = random.Next(minimalMoney, maximalMoney);
        }

        public int Money { get; private set; }
        public bool IsLeave { get; private set; }

        public void Pay(int price)
        {
            Money -= price;
        }

        public void RemoveBreackDown()
        {
            _car.RemoveBreackDown();
        }

        public int GetPartNumber()
        {
            return _car.GetPartNumber();
        }

        public void Leave()
        {
            IsLeave = true;
        }
    }

    class CarPart
    {
        public CarPart(int partNumber)
        {
            Number = partNumber;
            Price = Number * PriceRate;
        }

        public int PriceRate { get; private set; } = 500;
        public int Price { get; private set; }
        public int Number { get; private set; }
    }
}
